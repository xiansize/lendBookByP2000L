package com.tc.nfc.app.utils;

import java.io.IOException;

import android.R.integer;
import android.content.Intent;
import android.nfc.tech.NfcV;
import android.os.SystemClock;
import android.util.Log;
import android.widget.Toast;

/**
 * 
 * @author dason
 * 
 */
public class NfcVUtil {

	public static NfcV mNfcv;
	private final static String LOG_TAG = "NfcVUtil";
	private static String oldBarcode = "";// �ɵ�����
	private static String oldUid = "";// �ɵ�UID

	// byte[]ת 16�����ַ�
	public static String byte2HexStr(byte[] b) {
		String hs = "";
		String stmp = "";
		for (int n = 0; n < b.length; n++) {
			stmp = (Integer.toHexString(b[n] & 0XFF));
			if (stmp.length() == 1)
				hs = hs + "0" + stmp;
			else
				hs = hs + stmp;
		}
		return hs.toUpperCase();
	}

	public static String checkBarcode() throws IOException, IndexOutOfBoundsException {
		// Log.e("exe:", "return:"+mNfcv.isConnected());
		boolean isConnect = mNfcv.isConnected();
		// mNfcv.connect().
		byte[] UID = mNfcv.getTag().getId();
		Log.i("|" + isConnect + "|checkBarcode():", oldBarcode + "|" + oldUid + "|" + UID.toString());
		// Log.e("oldUid:",oldUid);
		if (oldBarcode != null && !oldBarcode.equals("") && oldUid.equals(UID.toString())) {
			if (isConnect) {
				return oldBarcode;
			} else {
				oldBarcode = "";
				return "";
			}
		}
		oldUid = UID.toString();
		if (oldUid == null || oldUid.equals("")) {
			return "";
		}
		Log.i("---UID:", UID.toString());
		int length = UID.length;
		byte[] UID_zan = new byte[8];
		byte[] uidShow = new byte[8];
		for (int i = 0; i < length; i++) {
			UID_zan[i] = UID[i];
		}
		for (int i = 0; i < length; i++) {
			uidShow[length - i - 1] = UID_zan[i];
		}

		byte[] responsebyte0 = null; // ����ֵ
		byte[] responsebyte1 = null; // ����ֵ
		byte[] responsebyte2 = null; // ����ֵ
		byte[] responsebyte3 = null; // ����ֵ

		byte cmd0[] = new byte[11];
		cmd0[0] = (byte) 0x20;
		cmd0[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd0, 2, UID.length); // UID
		cmd0[10] = (byte) 0x00;

		byte cmd1[] = new byte[11];
		cmd1[0] = (byte) 0x20;
		cmd1[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd1, 2, UID.length); // UID
		cmd1[10] = (byte) 0x01;

		byte cmd2[] = new byte[11];
		cmd2[0] = (byte) 0x20;
		cmd2[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd2, 2, UID.length); // UID
		cmd2[10] = (byte) 0x02;

		/*
		 * byte cmd3[] = new byte[11]; cmd3[0] = (byte) 0x20; cmd3[1] = (byte)
		 * 0x20; System.arraycopy(UID, 0, cmd3, 2, UID.length); // UID cmd3[10]
		 * = (byte) 0x02;
		 */
		if (!mNfcv.isConnected()) {
			try {
				mNfcv.close();
				mNfcv.connect();
			} catch (Exception ex) {
				Log.i("connect", "����" + ex.toString());
				return "";
			}
		}
		responsebyte0 = mNfcv.transceive(cmd0);
		responsebyte1 = mNfcv.transceive(cmd1);
		responsebyte2 = mNfcv.transceive(cmd2);
		// responsebyte3 = mNfcv.transceive(cmd3);
		Log.d("01", "responsebyte0:" + responsebyte0 + "|" + responsebyte1 + "|" + responsebyte2);


		// ����һ��Ļ�ȡ��ֵ������10λ�Ļ���
		// ��һ��ĵ�0λ��ֵΪѹ����ʽ����(2,1,4),
		// 2:���ִ�,�����������������д�뵽RFID��ǩ��
		// 1:���������������ǰ���ݱ����ʮ�������ݺ���д�뵽RFID��ǩ��
		// 4:��ĸ������
		// ��һ��ĵ�1λ��ֵ:�Ƿ�д����
		// ��һ���2��3λ��ֵ����ʾ���볤�ȣ���ݳ���λ����ٸ��ֽڱ����������
		// ��һ��ĵ�0λ��ֵΪѹ����ʽ����(2,1,4)��ʾ,ѹ��ģʽ ��һ��ĵ�0λ��ֵΪѹ����ʽ����(2,1,4)
		String sign = "1";
		// byte flag =responsebyte0[2];
		// ��ʾ���볤��
		int len = 0;
		String lenStr = "";
		String data = "";
		String tmp;
		String tmp3 = "";

		boolean isGt = false;
		Log.i("��ʶ", "isGt��" + isGt);
		// ��һ��
		if (responsebyte0 != null) {
			tmp = byte2HexStr(responsebyte0).substring(2);
			data += tmp;
			// ��ȡ���ȵ�ֵ
			sign = tmp.substring(0, 1);
			lenStr = tmp.substring(2, 4);
			try {
				len = Integer.parseInt(lenStr) * 2 + 4; //
			} catch (Exception ex) {
				len = 0;
			}
		}
		if (responsebyte1 != null) {
			tmp = byte2HexStr(responsebyte1).substring(2);
			data += tmp;
		}
		if (responsebyte2 != null) {
			try {
				tmp = byte2HexStr(responsebyte2).substring(2, 5);

				tmp3 = byte2HexStr(responsebyte2).substring(2);
			}catch (StringIndexOutOfBoundsException e){
				Log.d("NFCUTIL","StringIndexOutOfBoundsException");
				e.printStackTrace();
			}
			/*
			 * if(!isGt) data += tmp; else
			 */
			data += tmp3;
		}
		/*
		 * if(isGt){ if(data.length()>len){ data = data.substring(4,len);
		 * if(sign.equals("2")){ data =data.replace("F", "");//������һλΪF����ȥ��
		 * }else if(sign.equals("1")){//�����ʮ�����д��ȥ��Ҫת����ʮ���� data
		 * =""+Integer.parseInt(data,16); } } }else{ if(data.length()>6) data
		 * =data.substring(6); }
		 */
		// System.out.println(data);
		// ExCheBarcode exChbar = new ExCheBarcode(data);
		// System.out.println(exChbar.getEncodeBarcode());

		Log.d("AAJSON","data1 "+data);
		boolean isLoanSuc = ExCheBarcode.loadRule(data);
		if (!isLoanSuc) {
			oldBarcode = "";
			return "";
		}
		oldBarcode = ExCheBarcode.getEncodeBarcode();
		data = ExCheBarcode.getEncodeBarcode();
		Log.d("AAJSON",oldBarcode+" "+data);


		// mNfcv.close();
		return data;
	}

	public static String readBarcode(Intent intent) throws IOException, IndexOutOfBoundsException {
		// Tag tagFromIntent = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
		//
		// mNfcv = NfcV.get(tagFromIntent);
		byte[] UID = mNfcv.getTag().getId();

		Log.e("readBarcode:", "" + UID.toString());
		int length = UID.length;
		byte[] UID_zan = new byte[8];
		byte[] uidShow = new byte[8];
		for (int i = 0; i < length; i++) {
			UID_zan[i] = UID[i];
		}
		for (int i = 0; i < length; i++) {
			uidShow[length - i - 1] = UID_zan[i];
		}

		byte[] responsebyte0 = null; // ����ֵ
		byte[] responsebyte1 = null; // ����ֵ
		byte[] responsebyte2 = null; // ����ֵ

		byte cmd0[] = new byte[11];
		cmd0[0] = (byte) 0x20;
		cmd0[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd0, 2, UID.length); // UID
		cmd0[10] = (byte) 0x00;

		byte cmd1[] = new byte[11];
		cmd1[0] = (byte) 0x20;
		cmd1[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd1, 2, UID.length); // UID
		cmd1[10] = (byte) 0x01;

		byte cmd2[] = new byte[11];
		cmd2[0] = (byte) 0x20;
		cmd2[1] = (byte) 0x20;
		System.arraycopy(UID, 0, cmd2, 2, UID.length); // UID
		cmd2[10] = (byte) 0x02;

		if (!mNfcv.isConnected()) {
			mNfcv.connect();
		}
		responsebyte0 = mNfcv.transceive(cmd0);
		responsebyte1 = mNfcv.transceive(cmd1);
		responsebyte2 = mNfcv.transceive(cmd2);

		String data = "";
		String tmp;
		if (responsebyte0 != null) {
			tmp = byte2HexStr(responsebyte0).substring(8);
			data += tmp;
		}
		if (responsebyte1 != null) {
			tmp = byte2HexStr(responsebyte1).substring(2);
			data += tmp;
		}
		if (responsebyte2 != null) {
			tmp = byte2HexStr(responsebyte2).substring(2, 5);
			data += tmp;
		}
		// mNfcv.close();
		return data;
	}

	/**
	 * @param flag
	 *            true:AFI��c2 EAS��0xA2 false:AFI��07 EAS��0xA3
	 * @return
	 * @throws IOException
	 */
	public static Boolean writeAFI(boolean flag) throws IOException {
		// TODO Auto-generated method stub

		byte[] UID = mNfcv.getTag().getId();
		byte cmdAFI[] = new byte[11];
		cmdAFI[0] = (byte) 0x20;
		cmdAFI[1] = (byte) 0x27;
		System.arraycopy(UID, 0, cmdAFI, 2, UID.length); // UID
		cmdAFI[10] = flag ? (byte) 0xc2 : (byte) 0x07;
		/*
		 * �㷴�� // ����EAS 0xA2�ܳ��� 0xA3���ܳ��� byte cmdSetEAS[] = new byte[11];
		 * cmdSetEAS[0] = (byte) 0x22; cmdSetEAS[1] = flag ? (byte)0xA2 :
		 * (byte)0xA3; cmdSetEAS[2]=(byte)0x04; System.arraycopy(UID, 0,
		 * cmdSetEAS, 3, UID.length); //UID
		 */

		// ����EAS 0xA3�ܳ��� 0xA2���ܳ���
		byte cmdSetEAS[] = new byte[11];
		cmdSetEAS[0] = (byte) 0x22;
		cmdSetEAS[1] = flag ? (byte) 0xA3 : (byte) 0xA2;
		cmdSetEAS[2] = (byte) 0x04;
		System.arraycopy(UID, 0, cmdSetEAS, 3, UID.length);

		if (!mNfcv.isConnected()) {
			mNfcv.connect();
		}

		byte[] rsp = mNfcv.transceive(cmdAFI);
		byte[] rsp1 = mNfcv.transceive(cmdSetEAS);
		if (rsp[0] == 0x00 && rsp1[0] == 0x00) {
			return true;
		}
		return false;
	}

	public static int bytesToInt(byte[] bytes) {

		int addr = bytes[0] & 0xFF;

		addr |= ((bytes[1] << 8) & 0xFF00);

		addr |= ((bytes[2] << 16) & 0xFF0000);

		addr |= ((bytes[3] << 24) & 0xFF000000);

		return addr;

	}

	public static void main(String[] args) {
		byte[] test = "21070100101784943F0".getBytes();
		byte[] lenBt = new byte[2];
		for (int i = 0; i < 2; i++) {
			lenBt[i] = test[i];
		}
		int len = bytesToInt(lenBt);
		System.out.println("len:" + len);
	}

}